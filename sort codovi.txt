1.Insertion Sort

#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <chrono>
#include <algorithm>
using namespace std;
using namespace std::chrono;

void insertionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;
        
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

bool isSorted(const vector<int>& arr) {
    for (size_t i = 1; i < arr.size(); i++) {
        if (arr[i] < arr[i-1]) {
            return false;
        }
    }
    return true;
}

int main() {
    const int SIZE = 100000;
    vector<int> arr(SIZE);
    srand(time(0));

    for (int i = 0; i < SIZE; i++) {
        arr[i] = rand() % 1000000 + 1;
    }

    vector<int> original = arr;
    
    auto start = high_resolution_clock::now();
    insertionSort(arr);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<milliseconds>(stop - start);

    bool sorted = isSorted(arr);
    cout << "Insertion Sort Time: " << duration.count() << " milliseconds" << endl;
    cout << "Sorted correctly: " << (sorted ? "Yes" : "No") << endl;
    
    return 0;
}
2. Selection sort

#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <chrono>
#include <algorithm>
using namespace std;
using namespace std::chrono;

void selectionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; i++) {
        int min_idx = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[min_idx]) {
                min_idx = j;
            }
        }
        swap(arr[i], arr[min_idx]);
    }
}

bool isSorted(const vector<int>& arr) {
    for (size_t i = 1; i < arr.size(); i++) {
        if (arr[i] < arr[i-1]) {
            return false;
        }
    }
    return true;
}

int main() {
    const int SIZE = 100000;
    vector<int> arr(SIZE);
    srand(time(0));

    for (int i = 0; i < SIZE; i++) {
        arr[i] = rand() % 1000000 + 1;
    }

    vector<int> original = arr;
    
    auto start = high_resolution_clock::now();
    selectionSort(arr);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<milliseconds>(stop - start);

    bool sorted = isSorted(arr);
    cout << "Selection Sort Time: " << duration.count() << " milliseconds" << endl;
    cout << "Sorted correctly: " << (sorted ? "Yes" : "No") << endl;
    
    return 0;
}
3.Quick sort

#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <chrono>
#include <algorithm>
using namespace std;
using namespace std::chrono;

int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    
    for (int j = low; j < high; j++) {
        if (arr[j] <= pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

void quickSort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

bool isSorted(const vector<int>& arr) {
    for (size_t i = 1; i < arr.size(); i++) {
        if (arr[i] < arr[i-1]) {
            return false;
        }
    }
    return true;
}

int main() {
    const int SIZE = 100000;
    vector<int> arr(SIZE);
    srand(time(0));

    for (int i = 0; i < SIZE; i++) {
        arr[i] = rand() % 1000000 + 1;
    }

    vector<int> original = arr;
    
    auto start = high_resolution_clock::now();
    quickSort(arr, 0, arr.size() - 1);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<milliseconds>(stop - start);

    bool sorted = isSorted(arr);
    cout << "Quick Sort Time: " << duration.count() << " milliseconds" << endl;
    cout << "Sorted correctly: " << (sorted ? "Yes" : "No") << endl;
    
    return 0;
}
4.Merge Sort

#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <chrono>
#include <algorithm>
using namespace std;
using namespace std::chrono;

void merge(vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    vector<int> L(n1), R(n2);

    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = left;

    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(vector<int>& arr, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

bool isSorted(const vector<int>& arr) {
    for (size_t i = 1; i < arr.size(); i++) {
        if (arr[i] < arr[i-1]) {
            return false;
        }
    }
    return true;
}

int main() {
    const int SIZE = 100000;
    vector<int> arr(SIZE);
    srand(time(0));

    for (int i = 0; i < SIZE; i++) {
        arr[i] = rand() % 1000000 + 1;
    }

    vector<int> original = arr;
    
    auto start = high_resolution_clock::now();
    mergeSort(arr, 0, arr.size() - 1);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<milliseconds>(stop - start);

    bool sorted = isSorted(arr);
    cout << "Merge Sort Time: " << duration.count() << " milliseconds" << endl;
    cout << "Sorted correctly: " << (sorted ? "Yes" : "No") << endl;
    
    return 0;
}